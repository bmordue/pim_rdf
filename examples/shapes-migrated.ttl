# Updated SHACL Shapes for Schema.org Action Tasks

@prefix sh:      <http://www.w3.org/ns/shacl#> .
@prefix schema:  <https://schema.org/> .
@prefix pim:     <https://ben.example/ns/pim#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix xsd:     <http://www.w3.org/2001/XMLSchema#> .

# Shape for schema.org Action-based tasks
schema:ActionTaskShape
  a sh:NodeShape ;
  sh:targetClass schema:Action ;
  sh:name "Task Action Shape" ;
  sh:description "Validates tasks modeled as schema.org Actions" ;
  
  # Required properties
  sh:property [
    sh:path schema:name ;
    sh:datatype xsd:string ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:message "Every task must have exactly one schema:name" ;
  ] ;
  
  sh:property [
    sh:path schema:actionStatus ;
    sh:in (schema:PotentialActionStatus schema:ActiveActionStatus schema:CompletedActionStatus schema:FailedActionStatus) ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:message "Task must have valid actionStatus" ;
  ] ;
  
  # Optional but recommended properties
  sh:property [
    sh:path schema:agent ;
    sh:nodeKind sh:IRI ;
    sh:message "Task agent should be a resource (person/organization)" ;
  ] ;
  
  sh:property [
    sh:path schema:duration ;
    sh:datatype xsd:duration ;
    sh:message "Task duration must be a valid xsd:duration" ;
  ] ;
  
  sh:property [
    sh:path schema:startTime ;
    sh:datatype xsd:dateTime ;
    sh:lessThan schema:endTime ;
    sh:message "Start time must be before end time" ;
  ] ;
  
  sh:property [
    sh:path schema:endTime ;
    sh:datatype xsd:dateTime ;
    sh:message "End time must be a valid dateTime" ;
  ] ;
  
  sh:property [
    sh:path schema:isPartOf ;
    sh:nodeKind sh:IRI ;
    sh:message "Project reference should be a URI" ;
  ] ;
  
  sh:property [
    sh:path schema:prerequisite ;
    sh:nodeKind sh:IRI ;
    sh:message "Prerequisites should be task URIs" ;
  ] .

# Shape for custom PIM properties (used in hybrid approach)
pim:TaskExtensionShape
  a sh:NodeShape ;
  sh:targetClass schema:Action ;
  sh:name "PIM Task Extension Shape" ;
  sh:description "Validates custom PIM properties on schema.org Actions" ;
  
  sh:property [
    sh:path pim:priority ;
    sh:datatype xsd:integer ;
    sh:minInclusive 0 ;
    sh:maxInclusive 5 ;
    sh:message "Priority must be integer between 0 (highest) and 5 (lowest)" ;
  ] ;
  
  sh:property [
    sh:path pim:inbox ;
    sh:datatype xsd:boolean ;
    sh:maxCount 1 ;
    sh:message "Inbox flag must be a single boolean value" ;
  ] .

# Legacy PIM Task shape (for backward compatibility)
pim:LegacyTaskShape
  a sh:NodeShape ;
  sh:targetClass pim:Task ;
  sh:name "Legacy PIM Task Shape" ;
  sh:description "Validates legacy PIM task model" ;
  
  sh:property [
    sh:path dcterms:title ;
    sh:datatype xsd:string ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:message "Legacy task must have dcterms:title" ;
  ] ;
  
  sh:property [
    sh:path pim:status ;
    sh:in ("todo" "doing" "done") ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:message "Legacy task status must be: todo, doing, or done" ;
  ] ;
  
  sh:property [
    sh:path pim:priority ;
    sh:datatype xsd:integer ;
    sh:minInclusive 0 ;
    sh:maxInclusive 5 ;
    sh:message "Priority must be integer between 0 and 5" ;
  ] .

# Hybrid task shape (supports both models)
pim:HybridTaskShape
  a sh:NodeShape ;
  sh:name "Hybrid Task Shape" ;
  sh:description "Validates tasks that use both PIM and schema.org properties" ;
  
  # Target tasks that have both types
  sh:target [
    a sh:SPARQLTarget ;
    sh:select """
      PREFIX schema: <https://schema.org/>
      PREFIX pim: <https://ben.example/ns/pim#>
      SELECT ?this WHERE {
        ?this a schema:Action, pim:Task .
      }
    """ ;
  ] ;
  
  # Ensure consistency between parallel properties
  sh:sparql [
    sh:message "Schema.org name and dcterms:title should be consistent" ;
    sh:select """
      PREFIX schema: <https://schema.org/>
      PREFIX dcterms: <http://purl.org/dc/terms/>
      SELECT $this WHERE {
        $this schema:name ?schemaName ;
              dcterms:title ?dcTitle .
        FILTER(?schemaName != ?dcTitle)
      }
    """ ;
  ] ;
  
  sh:sparql [
    sh:message "Action status should align with PIM status" ;
    sh:select """
      PREFIX schema: <https://schema.org/>
      PREFIX pim: <https://ben.example/ns/pim#>
      SELECT $this WHERE {
        $this schema:actionStatus ?schemaStatus ;
              pim:status ?pimStatus .
        FILTER(
          (?schemaStatus = schema:PotentialActionStatus && ?pimStatus != "todo") ||
          (?schemaStatus = schema:ActiveActionStatus && ?pimStatus != "doing") ||
          (?schemaStatus = schema:CompletedActionStatus && ?pimStatus != "done")
        )
      }
    """ ;
  ] .

# Project validation shape
pim:ProjectShape
  a sh:NodeShape ;
  sh:targetClass pim:Project ;
  sh:name "Project Shape" ;
  sh:description "Validates project entities" ;
  
  sh:property [
    sh:path dcterms:title ;
    sh:datatype xsd:string ;
    sh:minCount 1 ;
    sh:message "Project must have a title" ;
  ] .